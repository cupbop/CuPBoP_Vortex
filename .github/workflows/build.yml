name: build

on:
  push:
    paths-ignore:
      - '*.md'

  pull_request:
    paths-ignore:
      - '*.md'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      uses: actions/checkout@v3

      - name: Set up Node.js 20
        uses: actions/setup-node@v2
        with:
         node-version: '20'

      - name: Check Node.js version
        run: node -v
         
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "14.0"

      - name: Download vortex header
        run: |
          cd ${{ github.workspace }}
          export CuPBoP_PATH=`pwd`
          wget 'https://www.dropbox.com/scl/fi/nd924ma3cq1fhauo0bs8x/vortex-header.tar.gz?rlkey=zudpp29yuxcrn42mxkiga8e06&dl=1' -O vortex-header.tar.gz
          tar -xzf vortex-header.tar.gz
          cp vortex.h $CuPBoP_PATH/runtime/include

      - name: Download CUDA header files
        run: |
          cd ${{ github.workspace }}
          wget https://www.dropbox.com/s/r18io0zu3idke5p/cuda-header.tar.gz?dl=1
          tar -xzf 'cuda-header.tar.gz?dl=1'
          cp -r include/* runtime/threadPool/include/

      - name: Download CUDA files used for compiling NVVM IR
        run: |
          cd ${{ github.workspace }}
          wget https://www.dropbox.com/s/4pckqsjnl920gpn/cuda-10.1.tar.gz?dl=1
          tar -xzf 'cuda-10.1.tar.gz?dl=1'

      - name: Build project
        run: |
          cd ${{ github.workspace }}
          export CuPBoP_PATH=`pwd`
          export LD_LIBRARY_PATH=$CuPBoP_PATH/build/runtime:$CuPBoP_PATH/build/runtime/threadPool:$LD_LIBRARY_PATH
          export VORTEX_ARCHITECTURE=64
          mkdir build
          cd build
          cmake .. -DLLVM_CONFIG_PATH=`which llvm-config` -DCUDA_PATH=${{ github.workspace }}/cuda-10.1
          make -j8

          echo "Generate bitcode files (.bc) for host/device"
          export CUDA_PATH=$CuPBoP_PATH/cuda-10.1
          export VORTEX_SCHEDULE_FLAG=0
          export KERNEL_CU=saxpy.cu
          export ARCH=64
          export KERNEL=`basename $KERNEL_CU .cu`
          cd ${CuPBoP_PATH}/examples/microbench
          clang++ -O0 -g -std=c++11  ./$KERNEL_CU -I../.. --cuda-path=$CUDA_PATH --cuda-gpu-arch=sm_50 -L$CUDA_PATH/lib64 -lcudart_static -ldl -lrt -pthread -save-temps -v  || true

          echo "Generate LLVM IR files(.ll) for host and device"
          llvm-dis $KERNEL-cuda-nvptx64-nvidia-cuda-sm_50.bc
          llvm-dis $KERNEL-host-x86_64-unknown-linux-gnu.bc
          echo "Translate the kernel bitcode by using CuPBoP's kernel translator"
          $CuPBoP_PATH/build/compilation/kernelTranslator $KERNEL-cuda-nvptx64-nvidia-cuda-sm_50.bc kernel.bc
          llvm-dis kernel.bc

          echo "Translate the host bitcode by using CuPBoP's host translator"
          $CuPBoP_PATH/build/compilation/hostTranslator $KERNEL-host-x86_64-unknown-linux-gnu.bc host.bc
          llvm-dis host.bc
          llc --relocation-model=pic --filetype=obj host.bc -o host.o
          g++ -g -O0 host_vortexrt.cpp -c -o host_vortexrt.o
          
          echo "Download vortex dependencies"
          cd ${CuPBoP_PATH}
          wget -O VORTEX_DIR.tar.gz "https://www.dropbox.com/scl/fi/ywhj90xj6t80cgqsnkze3/VORTEX_DIR.tar.gz?rlkey=156ajyxnwf98pscx75imjxwu9"
          tar -xzf VORTEX_DIR.tar.gz

          echo "Download RISC-V toolchain dependencies"
          cd ${CuPBoP_PATH}
          export REPOSITORY=https://github.com/vortexgpgpu/vortex-toolchain-prebuilt/raw/master
          export OSDIR=${OSDIR:=ubuntu/focal}
          parts=$(eval echo {a..j})
          
          if [ $ARCH = 32 ]
          then
            for x in $parts
            do
                wget $REPOSITORY/riscv-gnu-toolchain/$OSDIR/riscv-gnu-toolchain.tar.bz2.parta$x
            done
            cat riscv-gnu-toolchain.tar.bz2.parta* > riscv-gnu-toolchain.tar.bz2
            tar -xvf riscv-gnu-toolchain.tar.bz2 > riscv_tar.log
            echo "Download RISC-V toolchain - Done"
          elif [ $ARCH = 64 ]
          then
            for x in $parts
            do
                wget $REPOSITORY/riscv64-gnu-toolchain/$OSDIR/riscv64-gnu-toolchain.tar.bz2.parta$x
            done
            cat riscv64-gnu-toolchain.tar.bz2.parta* > riscv64-gnu-toolchain.tar.bz2
            tar -xvf riscv64-gnu-toolchain.tar.bz2 > riscv_tar.log
            echo "Download RISC-V toolchain - Done"
          else
              echo "ARCH is setup to a wrong number, check your bash file"
              exit -1
          fi

          if [ $ARCH = 32 ]
          then
              export RISCV_TOOLCHAIN=${CuPBoP_PATH}/riscv-gnu-toolchain
              export RISCV_TOOLCHAIN_PREFIX=$RISCV_TOOLCHAIN/riscv32-unknown-elf-
              export RISCV_TOOLCHAIN_FOLDER=$RISCV_TOOLCHAIN
          elif [ $ARCH = 64 ]
          then
              export RISCV_TOOLCHAIN=${CuPBoP_PATH}/riscv64-gnu-toolchain
              export RISCV_TOOLCHAIN_PREFIX=$RISCV_TOOLCHAIN/riscv64-unknown-elf-
              export RISCV_TOOLCHAIN_FOLDER=$RISCV_TOOLCHAIN
          else
              echo "ARCH is setup to a wrong number, check your bash file"
              exit -1
          fi

          echo "Compile the translated bc code for vortex"
          export VX_VXFLAGS="-Xclang -target-feature -Xclang +vortex"
          export VORTEX_PATH=${CuPBoP_PATH}/VORTEX_DIR
          if [ $ARCH = 32 ]
          then
              VX_CFLAGS="-v -O3 -std=c++11 -march=rv32imf -mabi=ilp32f -mcmodel=medany -fno-rtti -fno-exceptions -nostartfiles -fdata-sections -ffunction-sections -I${VORTEX_PATH}/kernel/include -I${VORTEX_PATH}/hw"
              VX_LDFLAGS="-Wl,-Bstatic,-T,${VORTEX_PATH}/kernel/linker/vx_link32.ld,--defsym=STARTUP_ADDR=0x80000000 -Wl,--gc-sections ${VORTEX_PATH}/kernel/libvortexrt.a"
          else
              VX_CFLAGS="-v -O3 -std=c++11 --sysroot=${RISCV_TOOLCHAIN_FOLDER}/riscv64-unknown-elf --target=riscv64 -march=rv64imafd -mabi=lp64d -mcmodel=medany -fno-rtti -fno-exceptions -nostartfiles -fdata-sections -ffunction-sections -I${VORTEX_PATH}/kernel/include -I${VORTEX_PATH}/hw"
              VX_LDFLAGS="-Wl,-Bstatic,-T,${VORTEX_PATH}/kernel/linker/vx_link64.ld,--defsym=XLEN=64,--defsym=STARTUP_ADDR=0x180000000 -Wl,--gc-sections ${VORTEX_PATH}/kernel/libvortexrt.a"
          fi

          echo "--- compiling kernel.bc"
          cd ${CuPBoP_PATH}/examples/microbench
          export LLVM_PREFIX=${CuPBoP_PATH}/llvm
   
          ${LLVM_PREFIX}/bin/clang++ ${VX_CFLAGS} ${VX_VXFLAGS} kernel.bc -c -o kernel.o > kernel.log

          echo "--- compiling kernel_wrapper.cpp"
          ${LLVM_PREFIX}/bin/clang++ ${VX_CFLAGS} --gcc-toolchain=${RISCV_TOOLCHAIN_FOLDER} ../vortex_debug/kernel_wrapper.cpp -c -o kernel_wrapper.o 
          ${LLVM_PREFIX}/bin/llvm-objdump -D kernel_wrapper.o > kernel_wrapper.dump

          echo "--- compiling kernel.elf"
          if [ $ARCH = 32 ]
          then
              ${LLVM_PREFIX}/bin/clang++ ${VX_CFLAGS} --gcc-toolchain=${RISCV_TOOLCHAIN_FOLDER} kernel_wrapper.o kernel.o ${CuPBoP_PATH}/runtime/src/vortex/kernel/cudaKernelImpl.o -lm ${VX_LDFLAGS} -o kernel.elf
          else
              ${LLVM_PREFIX}/bin/clang++ ${VX_CFLAGS} --gcc-toolchain=${RISCV_TOOLCHAIN_FOLDER} kernel_wrapper.o kernel.o ${CuPBoP_PATH}/runtime/src/vortex/kernel/cudaKernelImpl_64.o -lm ${VX_LDFLAGS} -o kernel.elf
          fi

          nm -C --defined-only -g kernel.elf > lookup_global_symbols.txt
          ${LLVM_PREFIX}/bin/llvm-objcopy -O binary kernel.elf kernel.out
          ${LLVM_PREFIX}/bin/llvm-objdump -D kernel.elf > kernel.dump
          echo "--- Kernel compilation completed!"

          g++ -g -O0 -Wall -L../../build/runtime -L../../build/runtime/threadPool -L${VORTEX_PATH}/stub -I${VORTEX_PATH}/kernel/include -o host.out -fPIC -no-pie host.o host_vortexrt.o  -lc -lvortexRuntime -lvortex -lThreadPool -lpthread
          echo "--- Host compilation completed!"

          export PERF_CLASS=2
          LD_LIBRARY_PATH=../../build/runtime/threadPool:${VORTEX_PATH}/simx:${VORTEX_PATH}/stub:../../build/runtime:${LD_LIBRARY_PATH} ./host.out -q -v
          echo "--- Execution completed!"

